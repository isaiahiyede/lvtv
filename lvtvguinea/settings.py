"""
Django settings for lvtvguinea project.

Generated by 'django-admin startproject' using Django 1.8.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os


BASE_DIR = os.path.dirname(os.path.dirname(__file__))

if os.environ.get('RDS_DB_NAME', ''):
    DEBUG = False
else:
    DEBUG = True


#TEMPLATE_DEBUG = DEBUG

DEFAULT_FROM_EMAIL  = 'vdpguinea <info@adisenergy.com'

if os.environ.get('RDS_DB_NAME'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ['RDS_DB_NAME'],
            'USER': os.environ['RDS_USERNAME'],
            'PASSWORD': os.environ['RDS_PASSWORD'],
            'HOST': os.environ['RDS_HOSTNAME'],
            'PORT': os.environ['RDS_PORT'],

            # 'OPTIONS': {
            #      "init_command": "SET foreign_key_checks = 0;",
            # },
        }
    }

    AWS_ACCESS_KEY_ID           = os.environ['AWS_ACCESS_KEY_ID']
    AWS_SECRET_ACCESS_KEY       = os.environ['AWS_SECRET_KEY']

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = os.environ['DJANGO_SECRET_KEY']

    # STATIC_ROOT = os.path.join(
    #  os.path.dirname(
    #   os.path.dirname(
    #    os.path.abspath(__file__))), 'static')

    STATIC_PATH = os.path.join(BASE_DIR, 'static')

    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
    STATICFILES_STORAGE = 'storages.backends.s3boto.S3BotoStorage'

    AWS_STORAGE_BUCKET_NAME = 'vdpguinea'

    AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME

    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
    STATICFILES_STORAGE = 'storages.backends.s3boto.S3BotoStorage'

    STATICFILES_LOCATION = 'static'

    #STATIC_URL  = "https://%s/%s/" %(AWS_S3_CUSTOM_DOMAIN, STATICFILES_LOCATION)
    STATIC_URL  = "https://%s/" %AWS_S3_CUSTOM_DOMAIN

    #STATIC_ROOT = "https://%s/%s/" %(AWS_S3_CUSTOM_DOMAIN, STATICFILES_LOCATION)
    # STATIC_ROOT = "https://s3-eu-west-1.amazonaws.com/zaposta/static/"

    # Example: "http://media.lawrence.com/static/"
    #STATIC_URL = 'https://zaposta-live.s3.amazonaws.com/static/'
    #STATIC_URL = 'https://zaposta.com.s3.amazonaws.com/static/'
    #STATIC_URL = 'https://s3-eu-west-1.amazonaws.com/%s/static/' %AWS_STORAGE_BUCKET_NAME

    # Additional locations of static files
    STATICFILES_DIRS = (
        STATIC_PATH,
    )

    #MEDIA_ROOT = 'media' #os.path.join(BASE_DIR, "media")
    #MEDIA_ROOT = os.path.join(BASE_DIR, "media")

    # URL that handles the media served from MEDIA_ROOT. Make sure to use a
    # trailing slash.
    # Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
    #MEDIA_URL = 'https://s3-eu-west-1.amazonaws.com/zaposta-live/'
    MEDIA_LOCATION = 'media'
    #MEDIA_URL = "https://%s/%s/" %(AWS_S3_CUSTOM_DOMAIN, MEDIA_LOCATION)
    MEDIA_ROOT = MEDIA_URL = "https://%s/" %AWS_S3_CUSTOM_DOMAIN
    #STATIC_URL  = "https://%s/%s/" %(AWS_S3_CUSTOM_DOMAIN, STATICFILES_LOCATION)

    #AWS_QUERYSTRING_AUTH = False

    BROKER_TRANSPORT = 'sqs'
    BROKER_TRANSPORT_OPTIONS = {
        'region': 'eu-west-1a',
    }
    BROKER_USER = AWS_ACCESS_KEY_ID
    BROKER_PASSWORD = AWS_SECRET_ACCESS_KEY

    SERVER_EMAIL = DEFAULT_FROM_EMAIL

    # EMAIL_USE_TLS = True
    # EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    # EMAIL_HOST = ''
    # EMAIL_HOST_PASSWORD = '' #my gmail password
    # EMAIL_HOST_USER = '' #my gmail username
    # EMAIL_PORT =
    # DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

    ADMINS = (
    #('Abiodun Ajibike', 'ajibike.ca@gmail.com'),
    ('Isaiah Iyede', 'isaiahiyede.ca@gmail.com'),
    )

    #CACHES = {
    #    'default': {
    #        'BACKEND': 'django_elasticache.memcached.ElastiCache',
    #        'LOCATION': 'ca-cluster.dnntu4.cfg.euw1.cache.amazonaws.com:11211',
    #        'TIMEOUT': 60*5,
    #    }
    #}


    # #SSL Security
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_EXPIRE_AT_BROWSER_CLOSE = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    os.environ['wsgi.url_scheme'] = 'https'



else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
            'NAME': 'guinealvtv_db',
            'USER': 'root',                      # Not used with sqlite3.
            'PASSWORD': 'root',                  # Not used with sqlite3.
            'HOST': '127.0.0.1',                 # Set to empty string for localhost. Not used with sqlite3.
            'PORT': '3306',

            # 'OPTIONS': {
            #      "init_command": "SET foreign_key_checks = 0;",
            # },                  # Set to empty string for default. Not used with sqlite3.
        },

    }

    STATIC_ROOT = '' #os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'static')

    # URL prefix for static files.
    # Example: "http://media.lawrence.com/static/"
    STATIC_URL = '/static/'

    # Additional locations of static files
    STATICFILES_DIRS = (
        'static',
        # Put strings here, like "/home/html/static" or "C:/www/django/static".
        # Always use forward slashes, even on Windows.
        # Don't forget to use absolute paths, not relative paths.
    )

    MEDIA_ROOT = 'media' #os.path.join(PROJECT_PATH, "media")

    # URL that handles the media served from MEDIA_ROOT. Make sure to use a
    # trailing slash.
    # Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
    #MEDIA_URL = 'http://127.0.0.1:9002/media/'
    MEDIA_URL = '/media/'


    ADMINS = (
    # ('Your Name', 'your_email@example.com'),
    )

    
    EMAIL_USE_TLS = True
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'smtp.zoho.com'
    EMAIL_HOST_PASSWORD = 'wCDfLXjSn77x' #my gmail password
    EMAIL_HOST_USER = 'info@adisenergy.com' #my gmail username
    EMAIL_PORT = 587
    DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

    INTERNAL_IPS = ('127.0.0.1',)

    SECRET_KEY = 'testing'


SITE_ID = 1

ALLOWED_HOSTS = [
        'localhost',
        '.vdpguinea.com',
        '.www.vdpguinea.com',
    ]

#CACHES = {

#    'default': {
#        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
#        'LOCATION': 'firstcluster.dnntu4.cfg.euw1.cache.amazonaws.com:11211',
#
#    }
#}

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.7/howto/deployment/checklist/


# SESSION_IDLE_TIMEOUT = 120

SESSION_INACTIVITY_TIMEOUT_IN_SECONDS = 120

SESSION_SECURITY_EXPIRE_AFTER = 120

SESSION_EXPIRE_AT_BROWSER_CLOSE = True


# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
#
# TEMPLATE_DEBUG = True

# ALLOWED_HOSTS = []

TEMPLATE_PATH = os.path.join(BASE_DIR, 'templates')


# TEMPLATE_PATH2 = os.path.join(BASE_DIR, 'shipping/sh/templates')
# TEMPLATE_PATH3 = os.path.join(BASE_DIR, 'shopping/newCA/templates')
#
# TEMPLATE_DIRS = (
#     TEMPLATE_PATH,
#     )# TEMPLATE_PATH2, TEMPLATE_PATH3, )


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            # insert your TEMPLATE_DIRS here
            TEMPLATE_PATH,
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                # Insert your TEMPLATE_CONTEXT_PROCESSORS here or use this
                # list if you haven't customized them:
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                'django.contrib.messages.context_processors.messages',
                'django.core.context_processors.request',

            ],
            'debug': DEBUG,
        },
    },
]


# AUTHENTICATION_BACKENDS = (
#     'backends.EmailAuthBackEnd',
#     'backends.UsernameAuthBackEnd',
# )


DJANGO_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
)

LVTV_APPS = (
        'general',
        'client',
        'matchingApp',
        'paymentCalculator',
        'lvtvAdmin',
        'django.contrib.admin',
    )


if not os.environ.get('RDS_DB_NAME'):
    LVTV_APPS + ('debug_toolbar',)

INSTALLED_APPS = DJANGO_APPS + LVTV_APPS


MIDDLEWARE_CLASSES = (
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'lvtvguinea.middleware.AutoLogout',

)

AUTO_LOGOUT_DELAY = 1

LOGIN_URL = '/general/login/Page/'
LOGOUT_URL = '/general/logout/'
LOGIN_REDIRECT_URL = '/'

'''to handle domain and subdomain request'''

# if DEBUG == True and not os.environ.get('RDS_DB_NAME'):
#      MIDDLEWARE_CLASSES.insert(2, 'service_provider.middleware.subdomain.SubDomainMiddleware')
#      MIDDLEWARE_CLASSES.insert(3, 'service_provider.middleware.exceptions.ExceptionMiddleware')


ROOT_URLCONF = 'lvtvguinea.urls'

WSGI_APPLICATION = 'lvtvguinea.wsgi.application'

# Internationalization
# https://docs.djangoproject.com/en/1.7/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_I18N = True

#TIME_ZONE = 'UTC'
TIME_ZONE = 'UTC'

USE_L10N = True

USE_TZ = True

SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'


from django.http import UnreadablePostError

def skip_unreadable_post_error(record):
    if record.exc_info:
        exc_type, exc_value = record.exc_info[:2]
        if isinstance(exc_value, UnreadablePostError):
            return False
    return True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'skip_unreadable_posts':{
            '()': 'django.utils.log.CallbackFilter',
            'callback': skip_unreadable_post_error,
        },

    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false', 'skip_unreadable_posts'],
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True
        },
        # 'null':{
        #         'class': 'django.utils.log.NullHandler',
        # }
        'null':{
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.security.DisallowedHost': {
            'handlers': ['null'],
            'propagate': False,
        }
    }
}
